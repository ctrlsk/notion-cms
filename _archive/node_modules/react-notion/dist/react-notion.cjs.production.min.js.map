{"version":3,"file":"react-notion.cjs.production.min.js","sources":["../src/components/asset.tsx","../src/components/code.tsx","../src/utils.ts","../src/components/page-icon.tsx","../src/components/page-header.tsx","../src/block.tsx","../src/renderer.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { BlockType, ContentValueType, MapImageUrl } from \"../types\";\n\nconst types = [\"video\", \"image\", \"embed\", \"figma\"];\n\nconst Asset: React.FC<{\n  block: BlockType;\n  mapImageUrl: MapImageUrl;\n}> = ({ block, mapImageUrl }) => {\n  const value = block.value as ContentValueType;\n  const type = block.value.type;\n\n  if (!types.includes(type)) {\n    return null;\n  }\n\n  const format = value.format;\n  const {\n    display_source = undefined,\n    block_aspect_ratio = undefined,\n    block_height = 1,\n    block_width = 1\n  } = format ?? {};\n\n  const aspectRatio = block_aspect_ratio || block_height / block_width;\n\n  if (type === \"embed\" || type === \"video\" || type === \"figma\") {\n    return (\n      <div\n        style={{\n          paddingBottom: `${aspectRatio * 100}%`,\n          position: \"relative\"\n        }}\n      >\n        <iframe\n          className=\"notion-image-inset\"\n          src={type === \"figma\" ? value.properties.source[0][0] : display_source}\n        />\n      </div>\n    );\n  }\n\n  if (block.value.type === \"image\") {\n    const src = mapImageUrl(value.properties.source[0][0], block);\n    const caption = value.properties.caption?.[0][0];\n\n    if (block_aspect_ratio) {\n      return (\n        <div\n          style={{\n            paddingBottom: `${aspectRatio * 100}%`,\n            position: \"relative\"\n          }}\n        >\n          <img\n            className=\"notion-image-inset\"\n            alt={caption || \"notion image\"}\n            src={src}\n          />\n        </div>\n      );\n    } else {\n      return <img alt={caption} src={src} />;\n    }\n  }\n\n  return null;\n};\n\nexport default Asset;\n","import * as React from \"react\";\nimport { highlight, languages } from \"prismjs\";\nimport \"prismjs/components/prism-jsx\";\n\nconst Code: React.FC<{ code: string; language: string }> = ({\n  code,\n  language = \"javascript\"\n}) => {\n  const languageL = language.toLowerCase();\n  const prismLanguage = languages[languageL] || languages.javascript;\n\n  const langClass = `language-${language.toLowerCase()}`;\n\n  return (\n    <pre className={`notion-code ${langClass}`}>\n      <code\n        className={langClass}\n        dangerouslySetInnerHTML={{\n          __html: highlight(code, prismLanguage, language)\n        }}\n      />\n    </pre>\n  );\n};\n\nexport default Code;\n","import { DecorationType, BlockMapType, MapImageUrl } from \"./types\";\n\nexport const classNames = (...classes: Array<string | undefined | false>) =>\n  classes.filter(a => !!a).join(\" \");\n\nexport const getTextContent = (text: DecorationType[]) => {\n  return text.reduce((prev, current) => prev + current[0], \"\");\n};\n\nconst groupBlockContent = (blockMap: BlockMapType): string[][] => {\n  const output: string[][] = [];\n\n  let lastType: string | undefined = undefined;\n  let index = -1;\n\n  Object.keys(blockMap).forEach(id => {\n    blockMap[id].value.content?.forEach(blockId => {\n      const blockType = blockMap[blockId]?.value?.type;\n\n      if (blockType && blockType !== lastType) {\n        index++;\n        lastType = blockType;\n        output[index] = [];\n      }\n\n      output[index].push(blockId);\n    });\n\n    lastType = undefined;\n  });\n\n  return output;\n};\n\nexport const getListNumber = (blockId: string, blockMap: BlockMapType) => {\n  const groups = groupBlockContent(blockMap);\n  const group = groups.find(g => g.includes(blockId));\n\n  if (!group) {\n    return;\n  }\n\n  return group.indexOf(blockId) + 1;\n};\n\nexport const defaultMapImageUrl: MapImageUrl = (image = \"\", block) => {\n  const url = new URL(\n    `https://www.notion.so${\n      image.startsWith(\"/image\") ? image : `/image/${encodeURIComponent(image)}`\n    }`\n  );\n\n  if (block) {\n    const table =\n      block.value.parent_table === \"space\" ? \"block\" : block.value.parent_table;\n    url.searchParams.set(\"table\", table);\n    url.searchParams.set(\"id\", block.value.id);\n    url.searchParams.set(\"cache\", \"v2\");\n  }\n\n  return url.toString();\n};\n\nexport const defaultMapPageUrl = (pageId: string = \"\") => {\n  pageId = pageId.replace(/-/g, \"\");\n\n  return `/${pageId}`;\n};\n","import * as React from \"react\";\nimport {\n  BlockType,\n  PageValueType,\n  BlockValueType,\n  CalloutValueType,\n  MapImageUrl\n} from \"../types\";\nimport { getTextContent, classNames } from \"../utils\";\n\nconst isIconBlock = (\n  value: BlockValueType\n): value is PageValueType | CalloutValueType => {\n  return value.type === \"page\" || value.type === \"callout\";\n};\n\ninterface AssetProps {\n  block: BlockType;\n  mapImageUrl: MapImageUrl;\n  big?: boolean;\n  className?: string;\n}\n\nconst PageIcon: React.FC<AssetProps> = ({\n  block,\n  className,\n  big,\n  mapImageUrl\n}) => {\n  if (!isIconBlock(block.value)) {\n    return null;\n  }\n  const icon = block.value.format?.page_icon;\n  const title = block.value.properties?.title;\n\n  if (icon?.includes(\"http\")) {\n    const url = mapImageUrl(icon);\n\n    return (\n      <img\n        className={classNames(\n          className,\n          big ? \"notion-page-icon-cover\" : \"notion-page-icon\"\n        )}\n        src={url}\n        alt={title ? getTextContent(title) : \"Icon\"}\n      />\n    );\n  } else {\n    return (\n      <span\n        className={classNames(\n          className,\n          big ? \"notion-page-icon-cover\" : \"notion-page-icon\"\n        )}\n        role=\"img\"\n        aria-label={icon}\n      >\n        {icon}\n      </span>\n    );\n  }\n};\n\nexport default PageIcon;\n","import * as React from \"react\";\n\nimport { BlockMapType, MapPageUrl, MapImageUrl } from \"../types\";\nimport PageIcon from \"./page-icon\";\n\ninterface PageHeaderProps {\n  blockMap: BlockMapType;\n  mapPageUrl: MapPageUrl;\n  mapImageUrl: MapImageUrl;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  blockMap,\n  mapPageUrl,\n  mapImageUrl\n}) => {\n  const blockIds = Object.keys(blockMap);\n  const activePageId = blockIds[0];\n\n  if (!activePageId) {\n    return null;\n  }\n\n  const breadcrumbs = [];\n  let currentPageId = activePageId;\n\n  do {\n    const block = blockMap[currentPageId];\n    if (!block || !block.value) {\n      break;\n    }\n\n    const title = block.value.properties?.title[0][0];\n    const icon = (block.value as any).format?.page_icon;\n\n    if (!(title || icon)) {\n      break;\n    }\n\n    breadcrumbs.push({\n      block,\n      active: currentPageId === activePageId,\n      pageId: currentPageId,\n      title,\n      icon\n    });\n\n    const parentId = block.value.parent_id;\n\n    if (!parentId) {\n      break;\n    }\n\n    currentPageId = parentId;\n  } while (true);\n\n  breadcrumbs.reverse();\n\n  return (\n    <header className=\"notion-page-header\">\n      <div className=\"notion-nav-header\">\n        <div className=\"notion-nav-breadcrumbs\">\n          {breadcrumbs.map((breadcrumb, index) => (\n            <React.Fragment key={breadcrumb.pageId}>\n              <a\n                className={`notion-nav-breadcrumb ${\n                  breadcrumb.active ? \"notion-nav-breadcrumb-active\" : \"\"\n                }`}\n                href={\n                  breadcrumb.active ? undefined : mapPageUrl(breadcrumb.pageId)\n                }\n              >\n                {breadcrumb.icon && (\n                  <PageIcon\n                    className=\"notion-nav-icon\"\n                    block={breadcrumb.block}\n                    mapImageUrl={mapImageUrl}\n                  />\n                )}\n\n                {breadcrumb.title && (\n                  <span className=\"notion-nav-title\">{breadcrumb.title}</span>\n                )}\n              </a>\n\n              {index < breadcrumbs.length - 1 && (\n                <span className=\"notion-nav-spacer\">/</span>\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default PageHeader;\n","import * as React from \"react\";\nimport {\n  DecorationType,\n  BlockType,\n  ContentValueType,\n  BlockMapType,\n  MapPageUrl,\n  MapImageUrl\n} from \"./types\";\nimport Asset from \"./components/asset\";\nimport Code from \"./components/code\";\nimport PageIcon from \"./components/page-icon\";\nimport PageHeader from \"./components/page-header\";\nimport { classNames, getTextContent, getListNumber } from \"./utils\";\n\nexport const renderChildText = (properties: DecorationType[]) => {\n  return properties?.map(([text, decorations], i) => {\n    if (!decorations) {\n      return <React.Fragment key={i}>{text}</React.Fragment>;\n    }\n\n    return decorations.reduceRight((element, decorator) => {\n      switch (decorator[0]) {\n        case \"h\":\n          return (\n            <span key={i} className={`notion-${decorator[1]}`}>\n              {element}\n            </span>\n          );\n        case \"c\":\n          return (\n            <code key={i} className=\"notion-inline-code\">\n              {element}\n            </code>\n          );\n        case \"b\":\n          return <b key={i}>{element}</b>;\n        case \"i\":\n          return <em key={i}>{element}</em>;\n        case \"s\":\n          return <s key={i}>{element}</s>;\n        case \"a\":\n          return (\n            <a className=\"notion-link\" href={decorator[1]} key={i}>\n              {element}\n            </a>\n          );\n\n        default:\n          return <React.Fragment key={i}>{element}</React.Fragment>;\n      }\n    }, <>{text}</>);\n  });\n};\n\ninterface Block {\n  block: BlockType;\n  level: number;\n  blockMap: BlockMapType;\n  mapPageUrl: MapPageUrl;\n  mapImageUrl: MapImageUrl;\n\n  fullPage?: boolean;\n  hideHeader?: boolean;\n}\n\nexport const Block: React.FC<Block> = props => {\n  const {\n    block,\n    children,\n    level,\n    fullPage,\n    hideHeader,\n    blockMap,\n    mapPageUrl,\n    mapImageUrl\n  } = props;\n  const blockValue = block?.value;\n\n  switch (blockValue?.type) {\n    case \"page\":\n      if (level === 0) {\n        if (fullPage) {\n          if (!blockValue.properties) {\n            return null;\n          }\n\n          const {\n            page_icon,\n            page_cover,\n            page_cover_position,\n            page_full_width,\n            page_small_text\n          } = blockValue.format || {};\n\n          const coverPosition = (1 - (page_cover_position || 0.5)) * 100;\n\n          return (\n            <div className=\"notion notion-app\">\n              <div className=\"notion-cursor-listener\">\n                <div className=\"notion-frame\">\n                  {!hideHeader && (\n                    <PageHeader\n                      blockMap={blockMap}\n                      mapPageUrl={mapPageUrl}\n                      mapImageUrl={mapImageUrl}\n                    />\n                  )}\n\n                  <div className=\"notion-scroller\">\n                    {page_cover && (\n                      <img\n                        src={mapImageUrl(page_cover)}\n                        alt={getTextContent(blockValue.properties.title)}\n                        className=\"notion-page-cover\"\n                        style={{\n                          objectPosition: `center ${coverPosition}%`\n                        }}\n                      />\n                    )}\n                    <main\n                      className={classNames(\n                        \"notion-page\",\n                        !page_cover && \"notion-page-offset\",\n                        page_full_width && \"notion-full-width\",\n                        page_small_text && \"notion-small-text\"\n                      )}\n                    >\n                      {page_icon && (\n                        <PageIcon\n                          className={\n                            page_cover ? \"notion-page-icon-offset\" : undefined\n                          }\n                          block={block}\n                          big\n                          mapImageUrl={mapImageUrl}\n                        />\n                      )}\n\n                      <div className=\"notion-title\">\n                        {renderChildText(blockValue.properties.title)}\n                      </div>\n\n                      {children}\n                    </main>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        } else {\n          return <main className=\"notion\">{children}</main>;\n        }\n      } else {\n        if (!blockValue.properties) return null;\n        return (\n          <a className=\"notion-page-link\" href={mapPageUrl(blockValue.id)}>\n            {blockValue.format && (\n              <div className=\"notion-page-icon\">\n                <PageIcon block={block} mapImageUrl={mapImageUrl} />\n              </div>\n            )}\n            <div className=\"notion-page-text\">\n              {renderChildText(blockValue.properties.title)}\n            </div>\n          </a>\n        );\n      }\n    case \"header\":\n      if (!blockValue.properties) return null;\n      return (\n        <h1 className=\"notion-h1\">\n          {renderChildText(blockValue.properties.title)}\n        </h1>\n      );\n    case \"sub_header\":\n      if (!blockValue.properties) return null;\n      return (\n        <h2 className=\"notion-h2\">\n          {renderChildText(blockValue.properties.title)}\n        </h2>\n      );\n    case \"sub_sub_header\":\n      if (!blockValue.properties) return null;\n      return (\n        <h3 className=\"notion-h3\">\n          {renderChildText(blockValue.properties.title)}\n        </h3>\n      );\n    case \"divider\":\n      return <hr className=\"notion-hr\" />;\n    case \"text\":\n      if (!blockValue.properties) {\n        return <div className=\"notion-blank\">&nbsp;</div>;\n      }\n      const blockColor = blockValue.format?.block_color;\n      return (\n        <p\n          className={classNames(\n            `notion-text`,\n            blockColor && `notion-${blockColor}`\n          )}\n        >\n          {renderChildText(blockValue.properties.title)}\n        </p>\n      );\n    case \"bulleted_list\":\n    case \"numbered_list\":\n      const wrapList = (content: React.ReactNode, start?: number) =>\n        blockValue.type === \"bulleted_list\" ? (\n          <ul className=\"notion-list notion-list-disc\">{content}</ul>\n        ) : (\n          <ol start={start} className=\"notion-list notion-list-numbered\">\n            {content}\n          </ol>\n        );\n\n      let output: JSX.Element | null = null;\n\n      if (blockValue.content) {\n        output = (\n          <>\n            {blockValue.properties && (\n              <li>{renderChildText(blockValue.properties.title)}</li>\n            )}\n            {wrapList(children)}\n          </>\n        );\n      } else {\n        output = blockValue.properties ? (\n          <li>{renderChildText(blockValue.properties.title)}</li>\n        ) : null;\n      }\n\n      const isTopLevel =\n        block.value.type !== blockMap[block.value.parent_id].value.type;\n      const start = getListNumber(blockValue.id, blockMap);\n\n      return isTopLevel ? wrapList(output, start) : output;\n\n    case \"image\":\n    case \"embed\":\n    case \"figma\":\n    case \"video\":\n      const value = block.value as ContentValueType;\n\n      return (\n        <figure\n          className=\"notion-asset-wrapper\"\n          style={\n            value.format !== undefined\n              ? { width: value.format.block_width }\n              : undefined\n          }\n        >\n          <Asset block={block} mapImageUrl={mapImageUrl} />\n\n          {value.properties.caption && (\n            <figcaption className=\"notion-image-caption\">\n              {renderChildText(value.properties.caption)}\n            </figcaption>\n          )}\n        </figure>\n      );\n    case \"code\": {\n      if (blockValue.properties.title) {\n        const content = blockValue.properties.title[0][0];\n        const language = blockValue.properties.language[0][0];\n        return (\n          <Code key={blockValue.id} language={language || \"\"} code={content} />\n        );\n      }\n      break;\n    }\n    case \"column_list\":\n      return <div className=\"notion-row\">{children}</div>;\n    case \"column\":\n      const spacerWith = 46;\n      const ratio = blockValue.format.column_ratio;\n      const columns = Number((1 / ratio).toFixed(0));\n      const spacerTotalWith = (columns - 1) * spacerWith;\n      const width = `calc((100% - ${spacerTotalWith}px) * ${ratio})`;\n      return (\n        <>\n          <div className=\"notion-column\" style={{ width }}>\n            {children}\n          </div>\n          <div className=\"notion-spacer\" style={{ width: spacerWith }} />\n        </>\n      );\n    case \"quote\":\n      if (!blockValue.properties) return null;\n      return (\n        <blockquote className=\"notion-quote\">\n          {renderChildText(blockValue.properties.title)}\n        </blockquote>\n      );\n    case \"collection_view\":\n      if (!block) return null;\n\n      const collectionView = block?.collection?.types[0];\n\n      return (\n        <div>\n          <h3 className=\"notion-h3\">\n            {renderChildText(block.collection?.title!)}\n          </h3>\n\n          {collectionView?.type === \"table\" && (\n            <div style={{ maxWidth: \"100%\", marginTop: 5 }}>\n              <table className=\"notion-table\">\n                <thead>\n                  <tr className=\"notion-tr\">\n                    {collectionView.format?.table_properties\n                      ?.filter(p => p.visible)\n                      .map((gp, index) => (\n                        <th\n                          className=\"notion-th\"\n                          key={index}\n                          style={{ minWidth: gp.width }}\n                        >\n                          {block.collection?.schema[gp.property]?.name}\n                        </th>\n                      ))}\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {block?.collection?.data.map((row, index) => (\n                    <tr className=\"notion-tr\" key={index}>\n                      {collectionView.format?.table_properties\n                        ?.filter(p => p.visible)\n                        .map((gp, index) => (\n                          <td\n                            key={index}\n                            className={\n                              \"notion-td \" +\n                              (gp.property === \"title\" ? \"notion-bold\" : \"\")\n                            }\n                          >\n                            {\n                              renderChildText(\n                                row[\n                                  block.collection?.schema[gp.property]?.name!\n                                ]\n                              )!\n                            }\n                          </td>\n                        ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          {collectionView?.type === \"gallery\" && (\n            <div className=\"notion-gallery\">\n              {block.collection?.data.map((row, i) => (\n                <div key={`col-${i}`} className=\"notion-gallery-card\">\n                  <div className=\"notion-gallery-content\">\n                    {collectionView.format?.gallery_properties\n                      ?.filter(p => p.visible)\n                      .map((gp, idx) => (\n                        <p\n                          key={idx + \"item\"}\n                          className={\n                            \"notion-gallery-data \" +\n                            (idx === 0 ? \"is-first\" : \"\")\n                          }\n                        >\n                          {getTextContent(\n                            row[block.collection?.schema[gp.property].name!]\n                          )}\n                        </p>\n                      ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n    case \"callout\":\n      return (\n        <div\n          className={classNames(\n            \"notion-callout\",\n            blockValue.format.block_color &&\n              `notion-${blockValue.format.block_color}_co`\n          )}\n        >\n          <div>\n            <PageIcon block={block} mapImageUrl={mapImageUrl} />\n          </div>\n          <div className=\"notion-callout-text\">\n            {renderChildText(blockValue.properties.title)}\n          </div>\n        </div>\n      );\n    case \"bookmark\":\n      const link = blockValue.properties.link;\n      const title = blockValue.properties.title ?? link;\n      const description = blockValue.properties.description;\n      const block_color = blockValue.format?.block_color;\n      const bookmark_icon = blockValue.format?.bookmark_icon;\n      const bookmark_cover = blockValue.format?.bookmark_cover;\n\n      return (\n        <div className=\"notion-row\">\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={classNames(\n              \"notion-bookmark\",\n              block_color && `notion-${block_color}`\n            )}\n            href={link[0][0]}\n          >\n            <div>\n              <div className=\"notion-bookmark-title\">\n                {renderChildText(title)}\n              </div>\n              {description && (\n                <div className=\"notion-bookmark-description\">\n                  {renderChildText(description)}\n                </div>\n              )}\n\n              <div className=\"notion-bookmark-link\">\n                {bookmark_icon && (\n                  <img src={bookmark_icon} alt={getTextContent(title)} />\n                )}\n                <div>{renderChildText(link)}</div>\n              </div>\n            </div>\n            {bookmark_cover && (\n              <div className=\"notion-bookmark-image\">\n                <img src={bookmark_cover} alt={getTextContent(title)} />\n              </div>\n            )}\n          </a>\n        </div>\n      );\n    case \"toggle\":\n      return (\n        <details className=\"notion-toggle\">\n          <summary>{renderChildText(blockValue.properties.title)}</summary>\n          <div>{children}</div>\n        </details>\n      );\n    default:\n      if (process.env.NODE_ENV !== \"production\") {\n        console.log(\"Unsupported type \" + block?.value?.type);\n      }\n      return <div />;\n  }\n  return null;\n};\n","import React from \"react\";\nimport { BlockMapType, MapPageUrl, MapImageUrl } from \"./types\";\nimport { Block } from \"./block\";\nimport { defaultMapImageUrl, defaultMapPageUrl } from \"./utils\";\n\nexport interface NotionRendererProps {\n  blockMap: BlockMapType;\n  fullPage?: boolean;\n  hideHeader?: boolean;\n  mapPageUrl?: MapPageUrl;\n  mapImageUrl?: MapImageUrl;\n\n  currentId?: string;\n  level?: number;\n}\n\nexport const NotionRenderer: React.FC<NotionRendererProps> = ({\n  level = 0,\n  currentId,\n  mapPageUrl = defaultMapPageUrl,\n  mapImageUrl = defaultMapImageUrl,\n  ...props\n}) => {\n  const { blockMap } = props;\n  const id = currentId || Object.keys(blockMap)[0];\n  const currentBlock = blockMap[id];\n\n  if (!currentBlock) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"error rendering block\", currentId);\n    }\n    return null;\n  }\n\n  return (\n    <Block\n      key={id}\n      level={level}\n      block={currentBlock}\n      mapPageUrl={mapPageUrl}\n      mapImageUrl={mapImageUrl}\n      {...props}\n    >\n      {currentBlock?.value?.content?.map(contentId => (\n        <NotionRenderer\n          key={contentId}\n          currentId={contentId}\n          level={level + 1}\n          mapPageUrl={mapPageUrl}\n          mapImageUrl={mapImageUrl}\n          {...props}\n        />\n      ))}\n    </Block>\n  );\n};\n"],"names":["types","Asset","block","mapImageUrl","value","type","includes","format","display_source","block_aspect_ratio","undefined","block_height","block_width","aspectRatio","React","style","paddingBottom","position","className","src","properties","source","caption","_value$properties$cap","alt","Code","code","language","languageL","toLowerCase","prismLanguage","languages","javascript","langClass","dangerouslySetInnerHTML","__html","highlight","classNames","classes","filter","a","join","getTextContent","text","reduce","prev","current","getListNumber","blockId","blockMap","group","output","lastType","index","Object","keys","forEach","id","content","blockType","_blockMap$blockId","_blockMap$blockId$val","push","groupBlockContent","find","g","indexOf","defaultMapImageUrl","image","url","URL","startsWith","encodeURIComponent","searchParams","set","parent_table","toString","defaultMapPageUrl","pageId","replace","PageIcon","big","icon","_block$value$format","page_icon","title","_block$value$properti","role","PageHeader","mapPageUrl","activePageId","breadcrumbs","currentPageId","active","parentId","parent_id","reverse","map","breadcrumb","key","href","length","renderChildText","i","decorations","reduceRight","element","decorator","Block","props","children","level","fullPage","hideHeader","blockValue","page_cover","page_full_width","page_small_text","coverPosition","page_cover_position","objectPosition","blockColor","_blockValue$format","block_color","wrapList","start","isTopLevel","width","ratio","column_ratio","columns","Number","toFixed","collectionView","collection","_block$collection","_block$collection2","maxWidth","marginTop","_collectionView$forma","table_properties","_collectionView$forma2","p","visible","gp","minWidth","_block$collection3","schema","property","_block$collection3$sc","name","_block$collection4","data","row","_collectionView$forma3","_collectionView$forma4","_block$collection5","_block$collection5$sc","_block$collection6","_collectionView$forma5","gallery_properties","_collectionView$forma6","idx","_block$collection7","link","description","_blockValue$format2","bookmark_icon","_blockValue$format3","bookmark_cover","_blockValue$format4","target","rel","NotionRenderer","currentId","currentBlock","_currentBlock$value","_currentBlock$value$c","contentId"],"mappings":"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"}